package de.dimond.tippspiel.model.mapper

import de.dimond.tippspiel.model._

import net.liftweb.mapper._
import net.liftweb.common._

import org.scala_tools.time.Imports._
import java.util.Date

object DbResult extends DbResult with LongKeyedMetaMapper[DbResult] with MetaResult {
  var results: Map[Game, Option[Result]] = Map()

  def forGame(game: Game): Box[Result] = {
    results.get(game) match {
      case None => {
        find(By(_gameId, game.id)) match {
          case Full(result) => {
            results += game -> Some(result)
            Full(result)
          }
          case f: Failure => f
          case Empty => {
            results += game -> None
            Empty
          }
        }
      }
      case Some(ro) => Box(ro)
    }
  }
  override protected def doSaveForGame(game: Game, goalsHome: Int, goalsAway: Int): Box[Result] = {
    def save(r: DbResult) = {
      r._gameId(game.id)
      r._goalsHome(goalsHome)
      r._goalsAway(goalsAway)
      if (r.save()) {
        results += game -> Some(r)
        Full(r)
      } else {
        Failure("An unexpected database error occured")
      }
    }
    find(By(_gameId, game.id)) match {
      case Full(r) => save(r)
      case f: Failure => f
      case Empty => save(DbResult.create)
    }
  }
}

class DbResult extends Result with LongKeyedMapper[DbResult]{
  def getSingleton = DbResult

  override def primaryKeyField = _gameId

  protected object _gameId extends MappedLongIndex(this) {
    override def writePermission_? = true
    override def dbAutogenerated_? = false
  }
  protected object _goalsHome extends MappedInt(this) {
    override def required_? = true
  }
  protected object _goalsAway extends MappedInt(this) {
    override def required_? = true
  }

  def gameId = _gameId.is
  def goalsHome = _goalsHome.is
  def goalsAway = _goalsAway.is
}
